/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scorereader;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.nio.file.Files;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.bytedeco.javacpp.opencv_core;
import scorereader.abc.Parser;
import scorereader.server.Server;
import scorereader.structure.Figura;
import scorereader.structure.Linha;
import scorereader.structure.Nota;
import scorereader.structure.claves.Clave;

/**
 *
 * @author ascarneiro
 */
public class ScoreReader extends javax.swing.JFrame {

    public static String CAMINHO_DEFAULT = "C:\\Users\\ascarneiro\\Desktop\\TCC\\ScoreReader\\repository\\";
    public String[] scoreDir = new String[]{""};
    //Reconhecer os elementos
    ArrayList<Figura> processados = new ArrayList<Figura>();
    //Compilar os elementos
    Parser parser = new Parser();

    private StringBuilder consoleContent = new StringBuilder();

    /**
     * Creates new form Main
     */
    public ScoreReader() {
        initComponents();

        inicializar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jToggleButton9 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        FILE_NAME = new javax.swing.JTextField();
        processar = new javax.swing.JToggleButton();
        A = new javax.swing.JToggleButton();
        B = new javax.swing.JToggleButton();
        D = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        SERVER = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Compilar = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CONSOLE = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        FATOR = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        debugFIles = new javax.swing.JCheckBox();
        debugImages = new javax.swing.JCheckBox();
        C = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jToggleButton10 = new javax.swing.JToggleButton();
        STATUS = new javax.swing.JTextField();
        E = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();

        jTextField1.setText("jTextField1");

        jToggleButton9.setText("jToggleButton9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Score Reader");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToggleButton1.setText("Carregar DataSource MUSCIMA");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 123, 370, 30));

        jToggleButton2.setText("...");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 60, -1));

        FILE_NAME.setText("C:\\Users\\ascarneiro\\Desktop\\TCC\\ScoreReader\\repository\\Twinkle Twinkle Litlle Star Uma Barra de Compasso.png");
        getContentPane().add(FILE_NAME, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, 370, -1));

        processar.setText("Processar Conteudo Partitura");
        processar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processarActionPerformed(evt);
            }
        });
        getContentPane().add(processar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 250, 30));

        A.setText("ABC");
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });
        getContentPane().add(A, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 70, 30));

        B.setText("XHTML");
        B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BActionPerformed(evt);
            }
        });
        getContentPane().add(B, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 70, 30));

        D.setText("MIDI");
        D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DActionPerformed(evt);
            }
        });
        getContentPane().add(D, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 90, 30));

        jLabel1.setText("Arquivo:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 49, -1));

        SERVER.setText("http://localhost:8080/");
        getContentPane().add(SERVER, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 140, -1));

        jLabel2.setText("Fator Distancia:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, -1, 20));

        Compilar.setText("Compilar");
        Compilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompilarActionPerformed(evt);
            }
        });
        getContentPane().add(Compilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, 120, 30));

        CONSOLE.setColumns(20);
        CONSOLE.setRows(5);
        jScrollPane1.setViewportView(CONSOLE);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 240, 370, 150));

        jLabel3.setText("Console:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));

        FATOR.setText("2");
        getContentPane().add(FATOR, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 60, -1));

        jLabel5.setText("Servidor:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 25, -1, -1));

        jLabel4.setText("Debug:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 50, -1));

        jLabel6.setText("Abrir:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, -1, 10));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        debugFIles.setText("Files");
        debugFIles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                debugFIlesMouseClicked(evt);
            }
        });
        debugFIles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugFIlesActionPerformed(evt);
            }
        });

        debugImages.setText("Imagens");
        debugImages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                debugImagesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(debugFIles, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(debugImages, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(209, 209, 209))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(debugImages)
                    .addComponent(debugFIles, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 370, 40));

        C.setText("PDF");
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });
        getContentPane().add(C, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 200, 70, 30));
        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, -1, -1));

        jToggleButton10.setText("clear");
        jToggleButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton10ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, 60, 30));

        STATUS.setEditable(false);
        STATUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STATUSActionPerformed(evt);
            }
        });
        getContentPane().add(STATUS, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 60, 40));

        E.setText("SVG");
        E.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EActionPerformed(evt);
            }
        });
        getContentPane().add(E, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 70, 30));

        jToggleButton3.setText("CLF");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, 70, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        try {
            Server.server = SERVER.getText();
            Utilities.carregarDataSource();
            STATUS.setBackground(Color.GREEN);
            processar.setEnabled(true);
        } catch (Exception e) {
            processar.setEnabled(false);
            STATUS.setBackground(Color.ORANGE);
            log_console("Falha ao carregar dataSource, verifique se o servidor esta acessivel ou \n "
                    + " se ocorreu algum erro o log do servidor");

        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        try {
            //Carregar imagem   
            JFileChooser jfc = new JFileChooser(CAMINHO_DEFAULT);
            if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                FILE_NAME.setText(jfc.getSelectedFile().toPath().toString());
                inicializar();
            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivos :\n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    public void habilitarDesabilitarBotoes(boolean habilitar) {
        A.setEnabled(habilitar);
        B.setEnabled(habilitar);
        C.setEnabled(habilitar);
        D.setEnabled(habilitar);
        E.setEnabled(habilitar);
        Compilar.setEnabled(habilitar);
    }

    private void processarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processarActionPerformed

        Server.server = SERVER.getText();
        if (!FILE_NAME.getText().isEmpty()) {
            try {
                int fator = Integer.parseInt(FATOR.getText());
                byte[] originalImage = Files.readAllBytes(new File(FILE_NAME.getText()).toPath());

                //Remove linhas da pauta
                byte[] imageData = Utilities.removerLinhasDaPauta(originalImage);

                //Converte 
                opencv_core.IplImage imagemSemLinhas = Utilities.bufferedImageToIplImage(imageData);
                opencv_core.IplImage imagemCinza = Utilities.binarizar(imagemSemLinhas.clone());
                opencv_core.IplImage imageCopy = imagemCinza.clone();

                //Etapa de segmentacao
                ArrayList<Figura> figuras = Utilities.segmentar(imagemCinza, imageCopy);
                for (Figura figura : figuras) {
                    Figura classificada = Utilities.classificar(figura);
                    figura.setTipo(classificada.getTipo());
                }

                //Etapa obtem informacoes relativas a pauta, Linhas, Posicao das linhas etc
                ArrayList<Clave> pautas = Utilities.obterInformacoesPautas(originalImage);
                ArrayList<Nota> notas = Utilities.detectarAlturaNotas(imagemSemLinhas);

                //Determina se trata-se de uma nota musical ou n?o com base na posi??o X das notas musicais
                for (Figura figura : figuras) {
                    for (Nota nota : notas) {
                        //Determina a distancia entre os pontos
                        int diff = Math.abs((int) (nota.x - figura.x));
                        //Caso a tolerancia seja
                        if (diff < 3) {
                            figura.nota = nota;
                            break;
                        }
                    }
                }
                //Determina o meio dos espacos da pauta
                for (Clave clave : pautas) {
                    clave.calcularEspacos();//Pocessa espacos
                }

                for (Figura figura : figuras) {
                    if (figura.isNotaMusical()) {
                        for (Clave pauta : pautas) {

                            for (int i = 1; i <= pauta.getLinhas().size(); i++) {

                                Linha linha = pauta.getLinha(String.valueOf(i));
                                int diff = ((int) (figura.nota.y - linha.y));
                                int variacao = Math.abs(diff);
                                if (variacao < fator) {//Diferenca for de menos de 2 pixels
                                    figura.nota.nome = pauta.getNomeNota(linha.index);
                                    processados.add(figura);
                                } else {
                                    diff = ((int) (figura.nota.y - linha.yEspacoAbaixo));
                                    variacao = Math.abs(diff);
                                    if (variacao < fator) {
                                        //Pegar nota acima da pauta
                                        figura.nota.nome = pauta.getNomeNotaAbaixo(linha.index);
                                        processados.add(figura);
                                    } else {
                                        diff = ((int) (figura.nota.y - linha.yEspacoAcima));
                                        variacao = Math.abs(diff);
                                        //Pegar nota acima da pauta
                                        if (variacao < fator) {
                                            figura.nota.nome = pauta.getNomeNotaAcima(linha.index);
                                            processados.add(figura);
                                        }
                                    }
                                }
                            }

                        }
                    }

                }

                for (int i = 0; i < processados.size(); i++) {
                    Figura processado = processados.get(i);
                    String s = "Index: " + i + " Nota: " + processado.nota.nome + " Tipo: " + processado.tipo;
                    System.out.println(s);

                    log_console(s);
                    if (processado.isNotaMusical()) {
                        ByteArrayInputStream bais = new ByteArrayInputStream(processado.getImage());
                        BufferedImage read = ImageIO.read(bais);
                        ImageIO.write(read, "PNG", new File(Utilities.DIR_DEBUG + "../notas//" + i + ".png"));
                    }

                }

                Compilar.setEnabled(true);
                log_console("Partitura processada com sucesso....");

            } catch (Exception e) {
                habilitarDesabilitarBotoes(false);
                STATUS.setBackground(Color.ORANGE);
                log_console("Falha ao processar elementos da partitura: \n" + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um arquivo com extencao .PNG de partitura digitalizada \n"
                    + "Arquivo precisa estar com alta resolucao.");
        }


    }//GEN-LAST:event_processarActionPerformed

    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
        try {
            String dir = parser.getAbcFile();
            if (!dir.isEmpty()) {
                Desktop.getDesktop().open(new File(dir));
            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivo ABC: \n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_AActionPerformed

    private void CompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompilarActionPerformed
        try {
            scoreDir = parser.compile(FILE_NAME.getText(), processados);
            log_console("Codigo compilado com sucesso");
            habilitarDesabilitarBotoes(true);
        } catch (Exception e) {
            log_console("Falha ao Compilar Codigo ABC: \n" + e.getMessage());
        }
    }//GEN-LAST:event_CompilarActionPerformed

    private void BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BActionPerformed
        try {
            String dir = parser.getFileXHTML();
            if (!dir.isEmpty()) {
                Desktop.getDesktop().open(new File(dir));
            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivo SVG: \n" + e.getMessage());
            e.printStackTrace();

        }
    }//GEN-LAST:event_BActionPerformed

    private void DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DActionPerformed
        try {
            String dir = parser.getFileMidi();
            if (!dir.isEmpty()) {
                Desktop.getDesktop().open(new File(dir));
            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivo MIDI: \n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_DActionPerformed

    private void debugImagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debugImagesMouseClicked

        Utilities.DEBUG_IMAGES = debugImages.isSelected();
    }//GEN-LAST:event_debugImagesMouseClicked

    private void debugFIlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debugFIlesMouseClicked
        Utilities.DEBUG_VALUES = debugFIles.isSelected();
    }//GEN-LAST:event_debugFIlesMouseClicked

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        try {
            String dir = parser.getFilePDF();
            if (!dir.isEmpty()) {
                Desktop.getDesktop().open(new File(dir));
            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivo PDF: \n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_CActionPerformed

    private void jToggleButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton10ActionPerformed
        consoleContent = new StringBuilder();
        CONSOLE.setText("");
    }//GEN-LAST:event_jToggleButton10ActionPerformed

    private void STATUSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STATUSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_STATUSActionPerformed

    private void EActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EActionPerformed
        try {
            String dir = parser.getFileSvg();
            if (!dir.isEmpty()) {
                Desktop.getDesktop().open(new File(dir));
            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivo PDF: \n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_EActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        try {
            ArrayList<String> retorno = Utilities.classificarDebug();
            for (String linha : retorno) {
                log_console(linha);

            }
        } catch (Exception e) {
            log_console("Falha ao carregar arquivo PDF: \n" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void debugFIlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugFIlesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_debugFIlesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScoreReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScoreReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScoreReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoreReader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScoreReader sc = new ScoreReader();
                sc.setSize(600, 450);
                sc.setResizable(false);
                sc.setLocationRelativeTo(null);
                sc.setVisible(true);

            }
        });
    }

    public void log_console(String texto) {
        consoleContent.append(texto);
        CONSOLE.setText(consoleContent.append("\n").toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton A;
    private javax.swing.JToggleButton B;
    private javax.swing.JToggleButton C;
    private javax.swing.JTextArea CONSOLE;
    private javax.swing.JToggleButton Compilar;
    private javax.swing.JToggleButton D;
    private javax.swing.JToggleButton E;
    private javax.swing.JTextField FATOR;
    private javax.swing.JTextField FILE_NAME;
    private javax.swing.JTextField SERVER;
    private javax.swing.JTextField STATUS;
    private javax.swing.JCheckBox debugFIles;
    private javax.swing.JCheckBox debugImages;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton10;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton9;
    private javax.swing.JToggleButton processar;
    // End of variables declaration//GEN-END:variables

    private void inicializar() {
        try {
            STATUS.setBackground(Color.ORANGE);
            habilitarDesabilitarBotoes(false);

            Server.server = SERVER.getText();
            Utilities.carregarDataSource();
            STATUS.setBackground(Color.GREEN);
            processar.setEnabled(true);
        } catch (Exception e) {
            STATUS.setBackground(Color.ORANGE);
            processar.setEnabled(false);
            log_console("Falha ao carregar dataSource, verifique se \n"
                    + "o servidor esta acessivel ou se ocorreu \n"
                    + "algum erro o log do servidor");

        }
    }
}
